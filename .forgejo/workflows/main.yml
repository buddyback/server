name: Build and deploy

on:
  # This workflow is now triggered via workflow_dispatch from the code-check workflow
  workflow_dispatch:
    # No inputs needed

# Defines custom environment variables for the workflow
env:
  REGISTRY: git.marcorealacci.me
  USER: buddyback
  IMAGE_NAME: buddyback-server

# There is a single job in this workflow. It's configured to run on the latest available version of Ubuntu.
jobs:
  build-and-push-image:
    runs-on: docker
    container:
      image: catthehacker/ubuntu:act-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # - name: Restore build cache
      #   id: cache-buildx-restore
      #   uses: actions/cache/restore@v4
      #   with:
      #     path: |
      #       ${{ runner.temp }}/.buildx-cache
      #     key: ${{ runner.os }}-buildx

      # - name: Set up Docker Buildx
      #   uses: docker/setup-buildx-action@v3
        
      # Uses the `docker/login-action` action to log in to the Container registry registry using the account and password that will publish the packages. Once published, the packages are scoped to the account defined here.
      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: marco
          password: ${{secrets.REGISTRY_TOKEN}}
          
      # This step uses [docker/metadata-action](https://github.com/docker/metadata-action#about) to extract tags and labels that will be applied to the specified image. The `id` "meta" allows the output of this step to be referenced in a subsequent step. The `images` value provides the base name for the tags and labels.
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: https://github.com/docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ env.REGISTRY }}/${{ env.USER }}/${{ env.IMAGE_NAME }}
          flavor: |
            latest=true
            
      # This step uses the `docker/build-push-action` action to build the image, based on your repository's `Dockerfile`. If the build succeeds, it pushes the image to GitHub Packages.
      # It uses the `context` parameter to define the build's context as the set of files located in the specified path. For more information, see "[Usage](https://github.com/docker/build-push-action#usage)" in the README of the `docker/build-push-action` repository.
      # It uses the `tags` and `labels` parameters to tag and label the image with the output from the "meta" step.
      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          # Adding cache support to speed up builds
          # cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.USER }}/${{ env.IMAGE_NAME }}:cache
          # cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.USER }}/${{ env.IMAGE_NAME }}:cache,mode=max
          # cache-from: type=local,src=${{ runner.temp }}/.buildx-cache
          # cache-to: type=local,dest=${{ runner.temp }}/.buildx-cache-new,mode=max

      - name: Call webhook
        run: curl -X POST ${{secrets.DEPLOY_WEBHOOK}}

      - # Temp fix
        # https://github.com/docker/build-push-action/issues/252
        # https://github.com/moby/buildkit/issues/1896
        name: Move cache
        run: |
          rm -rf ${{ runner.temp }}/.buildx-cache
          mv ${{ runner.temp }}/.buildx-cache-new ${{ runner.temp }}/.buildx-cache

      # - name: Save Buildx cache
      #   id: cache-buildx-save
      #   uses: actions/cache/save@v4
      #   with:
      #     path: |
      #       ${{ runner.temp }}/.buildx-cache
      #     key: ${{ steps.cache-buildx-restore.outputs.cache-primary-key }}